#!/bin/bash

# Получаем название вакансии из аргумента и кодируем его в формат URI
VACANCY_NAME=$(jq -Rn --arg query "$1" '$query | @uri')
#  VACANCY_NAME=$(...)
# Это команда подстановки (command substitution) в Bash.
# Она выполняет команду внутри $(...) и сохраняет её вывод в переменную VACANCY_NAME.

#  jq -Rn --arg query "$1" '$query | @uri'
# jq: Запускает утилиту jq.
# -Rn: Это две опции, объединенные вместе:
# -R (raw input): Указывает jq, что входные данные являются строкой, а не JSON.
# -n (null input): Указывает jq, что входные данные пустые (null), и jq не будет ожидать JSON на входе.

# --arg query "$1": Создает переменную query внутри jq и присваивает ей значение первого аргумента скрипта ($1). 
# Это позволяет передать значение из Bash в jq.

# '$query | @uri': Это выражение jq, которое:
# $query: Использует значение переменной query, переданной из Bash.
# | @uri: Преобразует значение переменной query в формат URI (URL-кодирование). Это гарантирует, 
# что специальные символы (например, пробелы, символы пунктуации) будут правильно экранированы для использования в URL.

# Пример работы
# Предположим, что первый аргумент скрипта — это строка "data scientist". 
# Передача аргумента в jq:
# --arg query "$1" передает значение "data scientist" в переменную query внутри jq.
# Преобразование в формат URI:
# Выражение '$query | @uri' берет значение переменной query ("data scientist") и преобразует его в формат URI.
# Результат будет "data%20scientist", где пробел заменен на %20.
# Сохранение результата в переменную:
# Результат выполнения команды jq ("data%20scientist") сохраняется в переменную VACANCY_NAME.

# URL для запроса к API HeadHounter
API_URL="https://api.hh.ru/vacancies"

# Параметры запроса
PARAMS="?text=${VACANCY_NAME}&per_page=20&search_field=name"
# Переменная PARAMS
# PARAMS=: Это создание переменной с именем PARAMS. В Bash переменные могут содержать строки, числа или другие данные.

# Строка параметров
# ?: Вопросительный знак указывает на начало строки параметров в URL. Все параметры запроса передаются после этого символа.
# text=: Это имя параметра. В данном случае, параметр text используется для передачи текста поиска (названия вакансии).
# ${VACANCY_NAME}: Это значение переменной VACANCY_NAME, которая была заранее определена в скрипте. 
# Значение этой переменной подставляется в строку параметров. Например, если VACANCY_NAME равно "data%20scientist", 
# то в строке параметров будет text=data%20scientist.
# &: Амперсанд (&) используется для разделения параметров в строке запроса.
# per_page=: Это имя параметра. Параметр per_page указывает количество результатов (вакансий), которое должно быть возвращено на одной странице.
# 20: Это значение параметра. В данном случае, мы запрашиваем 20 вакансий на страницу.
# &: Снова используется для разделения параметров.
# search_field=: Это имя параметра. Параметр search_field указывает, в каком поле выполнять поиск.
# name: Это значение параметра. В данном случае, поиск выполняется по названию вакансии.

# ${VACANCY_NAME}: Это синтаксис подстановки значения переменной в Bash.
# $: Доллар указывает на то, что это переменная.
# {VACANCY_NAME}: Имя переменной заключено в фигурные скобки. Это необязательно, но рекомендуется, 
# чтобы избежать неоднозначностей, особенно если имя переменной состоит из нескольких слов или символов.


# Выполняем запрос и сохраняем результат в переменную
RESPONSE=$(curl -s -w "%{http_code}" -o temp.json "${API_URL}${PARAMS}")
HTTP_CODE=${RESPONSE: -3}

# curl — это утилита командной строки для выполнения HTTP-запросов. 
# Она позволяет отправлять запросы к серверам и получать ответы.

# -s: Эта опция указывает curl работать в тихом режиме (silent mode). 
# Это означает, что curl не будет выводить прогресс или информацию об ошибках в стандартный вывод.
# -w "%{http_code}": Эта опция указывает curl вывести HTTP код ответа после завершения запроса. 
# %{http_code} — это переменная, которая содержит HTTP код ответа (например, 200 для успешного запроса, 
# 404 для не найденного ресурса и т.д.).
# -o temp.json: Эта опция указывает curl сохранить тело ответа (содержимое) в файл temp.json.
# "${API_URL}${PARAMS}": Это полный URL для запроса. Переменные API_URL и PARAMS были определены ранее в скрипте. 
# API_URL содержит базовый URL, а PARAMS содержит строку параметров. 

# RESPONSE=$(...): Это команда подстановки (command substitution) в Bash. 
# Она выполняет команду внутри $(...) и сохраняет её вывод в переменную RESPONSE.

# HTTP_CODE=${RESPONSE: -3}: Эта строка извлекает последние три символа из значения переменной RESPONSE
# и сохраняет их в переменную HTTP_CODE.
# ${RESPONSE: -3}: Это синтаксис извлечения подстроки в Bash. -3 указывает, 
# что нужно взять последние три символа из строки RESPONSE.

# Проверяем HTTP код ответа
if [ "$HTTP_CODE" -ne 200 ]; then
    echo "Ошибка при выполнении запроса. HTTP код: $HTTP_CODE"S
    exit 1
fi

# if [...]: Это условный оператор в Bash. Он выполняет блок кода, если условие внутри квадратных скобок истинно.
# "$HTTP_CODE": Переменная HTTP_CODE содержит HTTP код ответа, который был получен от сервера. 
# кавычки "..." используются для правильного экранирования значения переменной, 
# особенно если оно содержит пробелы или специальные символы.
# -ne 200: Оператор -ne означает "не равно" (not equal). Условие проверяет, что значение переменной HTTP_CODE не равно 200.
# Код 200 означает успешный запрос (OK).
# Таким образом, это условие проверяет, что HTTP код ответа не равен 200, то есть запрос не был успешным.

#echo: Команда echo выводит текст на стандартный вывод (обычно в консоль).
# "Ошибка при выполнении запроса. HTTP код: $HTTP_CODE": Это строка, которая будет выведена. В ней:
# $HTTP_CODE: Подставляется значение переменной HTTP_CODE, чтобы пользователь увидел, какой именно код ответа был получен.
# Эта строка сообщает пользователю, что запрос не удался, и показывает HTTP код ответа, 
# который помогает понять, что пошло не так.

# exit 1: Команда exit завершает выполнение скрипта. Аргумент 1 — это код завершения (exit code). 
# Код 1 обычно используется для обозначения ошибки.
# Эта команда завершает скрипт, чтобы предотвратить выполнение последующих команд, так как запрос не удался.

# Форматируем и сохраняем результат в файл hh.json с помощью jq
jq '. | 
{
    found: .found,
    pages: .pages,
    page: .page,
    per_page: .per_page,
    items: .items
}' temp.json > hh.json


# Фильтр jq
# . | { ... }: Это фильтр jq, который применяется к входным данным.
# .: Означает текущий контекст (весь JSON-объект).
# |: Оператор pipe (трубопровод), который передает результат выражения слева в выражение справа.
# { ... }: Создает новый JSON-объект с указанными полями и значениями.

# temp.json > hh.json: преобразованный temp.json будет сохранен в файле hh.json.

# Выводим сообщение об успешном выполнении
echo "Информация о вакансиях сохранена в файл hh.json"

rm temp.json
